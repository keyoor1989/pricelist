generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  logo      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  models    Model[]
  products  Product[]
}

model Model {
  id        String    @id @default(uuid())
  name      String
  brandId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  brand     Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  products  Product[]

  @@unique([name, brandId])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String      @id @default(uuid())
  name          String      @unique
  partCode      String?     @unique
  brandId       String
  modelId       String
  categoryId    String
  purchasePrice Float
  dealerPrice   Float
  endUserPrice  Float
  gst           Float       @default(18)
  photoUrl      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  model         Model       @relation(fields: [modelId], references: [id], onDelete: Cascade)
  brand         Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  type      String   @default("END_USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  customerId  String
  userId      String
  status      String      @default("PENDING")
  totalAmount Float
  gstAmount   Float
  netAmount   Float
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
